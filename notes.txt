Quicksort:
Pivot is not included in either of 2 new quick sorts
j increments left until it finds something not greater than
i increments right until it finds something not less than
while true with break on j <= i
Pick pivot by median of first 3

Binary Trees:
In Order Traversal: what would be in order for binary search tree
PreOrder Traversal:  Curr Node comes before left, then right
PostOrder Traversal: Left, right, curr
CompleteTree:  All depths filled except for bottom right most
FullTree:  Each node is full or empty (2 or 0)
EQUAL TO NODE GOES TO THE LEFT

Heap:
Min Heap:  Complete Tree where min is the root, and each child is bigger than parent.  Insertion log(n).  Min lookup
is constant.  Min Deletion is log(n).  
Max heap: opposite
2 Operations: extract min/max.  And insert.

Heap sort (dont need to know implementation):{
	1) Turn array into heap ordered
	2) Sort by extraction from here
	(only implementation difference is array starts at idx 0 so we must adjust in all of our functions)

	2nlogN worst case, and does it IN PLACE.  As if we had a quick sort with guaranteed random distribution.
	Instable
	Poor use of cache memory on bigger arrays
}
	

Graphs:
Can have directed or undirected edges.
Can be implemented with ajacency lists in which BFS is efficient, or can be done using adjaceny matrix


Bi-directional search:
2 simulatenous BFS from A and B, cutting time by k^(d/2) where d is children.  When bfs' meet we've found a path.  However its slower if there is no path for obvious reasons

Bit Ops:
Multiplying by 2 is same as shifting left
~ negation (bit flipper)
^ xor (0 if same 1 if different)
& AND (1s when both were 1s)
| OR (1s where at least 1)
>> arithmetic right shift.  Replaces the most significant bit (sign) if it exists with whatever was there before
>>> logical right shift.  Shifts everything over to the right in normal bit fashion (sign bit will always be 0 for positive)


Bits:
a negative number K is respresented in n bits as (2 ^ n) - k + 1.  In other words, flip Ks bits and add 1 to it.


LSD:
2NW guarantee
Space: N + R
Stable


MSD:
2NW guarantee
On random, this is beat by fact once we find draws in a subarray we can stop looking at less significant chars
CACHE INEFFICIENT 
Space: N + RD where D is the longest substring tie length (for each depth of recursion we need R)
Stable

3 way string quick sort:
Worst case time (wn)logN
Random: NlogN
Instable
space: logN + w

Red Black Binary Tree:
every branch from root to null has same number of black links
never 2 red links in a row
therefore height of tree <= 2lgn
average case for search, insert, and delete is 1logN, worst case 2logn

Ternary Search Trie:
Essentially as fast as hashing for string keys, and space efficient
Space: 4N
time: L + lnN (average for random strings)
Self balancing exists with L + logN worst case
Outperforms hashes and red black bst even for non random data


Rway Trie:
space: (R + 1) * N
time: Linear for hits, sometimes sublinear for misses

Best Trie:
Rway at first 2 levels, then ternary afterwards.  Beats hashmaps on deduping benchmarks


Consistent Hashing:
Provides horizontal scalability by making only k(keys) / n (nodes) needing to be remapped after a new node is put in.
It also more randomly distributes the load with virtual replica nodes

2 types of global caches:
1. Type that fetches data from database when not in cache (preferred so we dont have duplicate cache misses)
2. Type that says "I dont have data" and tells server to hit DB for it, which then propogates it to cache (good if cache stores large files so that cache buffer isnt overwhelmed in event of many cache misses)

If site is too small to warrant CDN, server static content from separate server with its own domain, so we can simply change the DNS for this name later on if we become big enough for a CDN

3 Cache Invalidation Schemes:
1.  Write through:  All writes are made to cache and DB.  Ensures consistency, increases latency for writes
2.	Write around cache:  Only written to DB.  Cache is invalidated.  Increases cache misses
3.	Write back cache:  Only written to cache.  Updated cache data is periodically written to DB.  Risk of consistency loss, but makes writing super fast.  May be warranted for write heavy apps.

Use a directory server for both horizontal and vertical partitioning

3 Parition Types:
1. Key or Hash based partitioning
2. List partitioning
3. Round Robin partitioning

Dijkstra
Depends on Priority Queue used.  About ElogV where E is edges and V is nodes

Shortest Path In Edge Weighted Dags 
In an acyclic, directed graph, we can topologically sort it, then run dijkstra like algorithm on each node in topological order for E + 2V (one of the Vs is the topological sorting).  Can be used for negative weights. This can be used to find longest path in directed acyclic graph (just negate weights and find shortest path).  We use no priority queue since we need not take minimum, just go in topological order.

Queue Based Bellman Ford:
Requires no negative cycles.  EV worst case.  Typical case is E + V. V Space.

System Design Steps:
1. Clarify requirements
2. Define API
3. Back of envelope estimation
4. Define data model
5. High Level Design
6. Detailed Design
7. Identify and resolve bottleneck


Redis: In general, I am more a friend of Redis than Memcached, because I love the extra database-features of Redis like persistence and the built-in data structures like lists and sets. With Redis and a clever keyâ€™ing there may be a chance that you even can get completly rid of a database. But if you just need to cache, take Memcached, because it scales like a charm.

Autoscale with amazon's elastic load balancer

Use sysbench to benchmark machine










Questions to ask: 
https://github.com/appacademy/sf-job-search-curriculum/blob/4d34c0fcaa7a87f4df9d32d88571b5c6851692f6/soft-skills/interviewing/asking-questions.md
* What are your current priorities and focus areas at Cloudflare?
* How would you define the culture at Cloudflare? How do you think it fosters talent, helps people grow to the next level and be their best?
* What more would you like to see from the engineering team at Cloudflare?
* Can you describe how a product like Universal SSL went from its inception as an idea to shipping it to production?
* What is the most challenging question about Cloudflare or the market you've been asked in the last 30 days by a candidate, a member of the press, an investor, a customer or an employee?
* Has your website ever gone down? How did you tackle that challenge and bring it back up? What has been added since then to reduce the risk of letting your website go down?